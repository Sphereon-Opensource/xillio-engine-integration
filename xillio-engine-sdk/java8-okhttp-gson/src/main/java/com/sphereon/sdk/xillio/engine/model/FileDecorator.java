/**
 * Xillio Engine
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.xillio.engine.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;


/**
 * The file decorator contains various pieces of information related to files on a file system.
 */
@ApiModel(description = "The file decorator contains various pieces of information related to files on a file system.")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-11-21T22:58:01.852+01:00")
public class FileDecorator   {
  @SerializedName("extension")
  private String extension = null;

  @SerializedName("rawExtension")
  private String rawExtension = null;

  @SerializedName("size")
  private BigDecimal size = null;

  public FileDecorator extension(String extension) {
    this.extension = extension;
    return this;
  }

   /**
   * The (optionally cleaned) extension of the file.
   * @return extension
  **/
  @ApiModelProperty(example = "null", required = true, value = "The (optionally cleaned) extension of the file.")
  public String getExtension() {
    return extension;
  }

  public void setExtension(String extension) {
    this.extension = extension;
  }

  public FileDecorator rawExtension(String rawExtension) {
    this.rawExtension = rawExtension;
    return this;
  }

   /**
   * The extension of the file as found on the filesystem.
   * @return rawExtension
  **/
  @ApiModelProperty(example = "null", required = true, value = "The extension of the file as found on the filesystem.")
  public String getRawExtension() {
    return rawExtension;
  }

  public void setRawExtension(String rawExtension) {
    this.rawExtension = rawExtension;
  }

  public FileDecorator size(BigDecimal size) {
    this.size = size;
    return this;
  }

   /**
   * The byte-size of the file in kilobytes.
   * @return size
  **/
  @ApiModelProperty(example = "null", required = true, value = "The byte-size of the file in kilobytes.")
  public BigDecimal getSize() {
    return size;
  }

  public void setSize(BigDecimal size) {
    this.size = size;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileDecorator fileDecorator = (FileDecorator) o;
    return Objects.equals(this.extension, fileDecorator.extension) &&
        Objects.equals(this.rawExtension, fileDecorator.rawExtension) &&
        Objects.equals(this.size, fileDecorator.size);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extension, rawExtension, size);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileDecorator {\n");
    
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    rawExtension: ").append(toIndentedString(rawExtension)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}


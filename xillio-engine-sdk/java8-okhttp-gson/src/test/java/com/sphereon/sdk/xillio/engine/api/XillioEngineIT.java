/*
 * Xillio Engine
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.xillio.engine.api;

import com.google.gson.Gson;
import com.sphereon.sdk.xillio.engine.handler.ApiException;
import com.sphereon.sdk.xillio.engine.handler.ApiResponse;
import com.sphereon.sdk.xillio.engine.model.*;
import org.junit.*;
import org.junit.runners.MethodSorters;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;

/**
 * API tests for AllApi
 */
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class XillioEngineIT {

    static {
        // to support localhost.fiddler
        System.setProperty("http.proxyHost", "127.0.0.1");
        System.setProperty("https.proxyHost", "127.0.0.1");
        System.setProperty("http.proxyPort", "8888");
        System.setProperty("https.proxyPort", "8888");
    }

    private static final String FILE_NAME = "IntegrationTest.md";
    private static final URL FILE_URL = XillioEngineIT.class.getResource("/" + FILE_NAME);

    private static final String XILLIO_CONFIGURATION_ID = System.getProperty("xillio.engine.configuration.id", "59e4b5a7857aba0005a28228");
    private static final String XILLIO_PATH = System.getProperty("xillio.engine.test.path", "");
    private static final List<String> XILLIO_SCOPE = Arrays.asList("entity", "children");

    private static String ORIGINAL_CONTENT;
    private Entity defaultEntity;

    private final AllApi api = new AllApi();

    private static Entity previousEntity;

    @Before
    public void init() throws URISyntaxException, IOException {
        Assert.assertTrue(new File(FILE_URL.getFile()).exists());
        ORIGINAL_CONTENT = new String(Files.readAllBytes(Paths.get(FILE_URL.toURI())));

        this.defaultEntity = createDefaultEntity();
        Assert.assertNotNull(defaultEntity);
        Assert.assertEquals(FILE_NAME, defaultEntity.getOriginal().getName().getDisplayName());
    }



    /**
     * List Available Entities/Repositories
     * <p>
     * List Available Entities/Repositories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _000_listEntitiesTest() throws ApiException {
        ApiResponse<EntityResponse> apiResponse = api.listEntitiesWithHttpInfo(XILLIO_SCOPE, null, null);
        Assert.assertNotNull(apiResponse);
        Assert.assertEquals(200, apiResponse.getStatusCode());
        EntityResponse entityResponse = apiResponse.getData();
        Assert.assertNotNull(entityResponse);
        Assert.assertTrue(entityResponse.getChildren().size() >= 4);
    }



    /**
     * Create a new Entity
     * <p>
     * Create a new Entity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _010_createEntityTest() throws ApiException {
        Gson gson = new Gson();
        String include = null;
        String exclude = null;

        // Unfortunately we have to resolve to serialization since swagger V2 does not support both binary data and a json in a multipart-form
        String entityJson = gson.toJson(defaultEntity);
        ApiResponse<EntityResponse> response = api.createEntityWithHttpInfo(XILLIO_CONFIGURATION_ID, XILLIO_PATH, XILLIO_SCOPE, include, exclude, entityJson, ORIGINAL_CONTENT);
        Assert.assertNotNull(response);
        Assert.assertEquals(201, response.getStatusCode());
        EntityResponse entityResponse = response.getData();
        Assert.assertNotNull(entityResponse);

        Entity entity = entityResponse.getEntity();
        Assert.assertNotNull(entity);
        Assert.assertNotNull(entity.getId());
        Assert.assertEquals("File", entity.getKind());
        Assert.assertNotNull(entity.getXdip());
        Assert.assertNotNull(entity.getOriginal());
        Decorators decorators = entity.getOriginal();

        Assert.assertNotNull(decorators.getName());
        Assert.assertEquals(FILE_NAME, decorators.getName().getDisplayName());
        Assert.assertEquals(FILE_NAME, decorators.getName().getSystemName());

        Assert.assertNotNull(decorators.getParent());
        Assert.assertTrue(decorators.getParent().getId().endsWith(XILLIO_CONFIGURATION_ID));

        previousEntity = entity;




    }

    /**
     * Get an Entity
     * <p>
     * Get an Entity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _020_getEntityTest() throws ApiException {
        String include = null;
        String exclude = null;
        ApiResponse<EntityResponse> apiResponse = api.getEntityWithHttpInfo(XILLIO_CONFIGURATION_ID, FILE_NAME, XILLIO_SCOPE, include, exclude);
        Assert.assertNotNull(apiResponse);
        Assert.assertEquals(200, apiResponse.getStatusCode());
        EntityResponse entityResponse = apiResponse.getData();
        Assert.assertEquals(previousEntity, entityResponse.getEntity());

    }



    /**
     * Download an Entity&#39;s Binary Content
     * <p>
     * Download an Entity&#39;s Binary Content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _040_getContentTest() throws ApiException, IOException {
        ApiResponse<File> response = api.getContentWithHttpInfo(XILLIO_CONFIGURATION_ID, FILE_NAME);
        Assert.assertNotNull(response);
        Assert.assertEquals(200, response.getStatusCode());
        File file = response.getData();
        Assert.assertNotNull(file);

        String content = new String(Files.readAllBytes(file.toPath()));
        Assert.assertEquals(ORIGINAL_CONTENT, content);
        file.delete();

    }


    /**
     * Replaces an Entity&#39;s Binary Content
     * <p>
     * Replaces an Entity&#39;s Binary Content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Ignore
    public void updateContentTest() throws ApiException {
        // TODO: 2-11-2017
        String configurationId = null;
        String path = null;
        api.updateContent(configurationId, path);

        // TODO: test validations
    }

    /**
     * Update an existing Entity
     * <p>
     * Update an existing Entity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Ignore
    public void updateEntityTest() throws ApiException {
        // TODO: 2-11-2017
        String configurationId = null;
        String path = null;
        List<String> scope = null;
        String include = null;
        String exclude = null;
        EntityResponse entity = null;
        EntityResponse response = api.updateEntity(configurationId, path, scope, include, exclude, entity);

        // TODO: test validations
    }


    /**
     * Delete an existing Entity
     * <p>
     * Delete an existing Entity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void _999_deleteEntityTest() throws ApiException {
        ApiResponse<Void> apiResponse = api.deleteEntityWithHttpInfo(XILLIO_CONFIGURATION_ID, FILE_NAME);
        Assert.assertNotNull(apiResponse);
        Assert.assertEquals(204, apiResponse.getStatusCode());
    }




    private Entity createDefaultEntity() {
        Decorators decorators = new Decorators();
        decorators.name(new NameDecorator().displayName(FILE_NAME).systemName(FILE_NAME));
//        decorators.mimeType(new MimeTypeDecorator().type("text/plain"));
        return new Entity().kind("File").original(decorators).modified(decorators);
    }
}

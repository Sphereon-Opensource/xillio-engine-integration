/* 
 * Xillio Engine
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Sphereon.SDK.Xillio.Engine.Model
{
    /// <summary>
    /// The hash decorator contains one or more types of hashes corresponding to the entity.
    /// </summary>
    [DataContract]
    public partial class HashDecorator :  IEquatable<HashDecorator>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HashDecorator" /> class.
        /// </summary>
        /// <param name="Md5">The md5 hash of the entity\&quot;s binary contents..</param>
        /// <param name="Sha1">The sha1 hash of the entity\&quot;s binary contents..</param>
        /// <param name="Sha256">The sha256 hash of the entity\&quot;s binary contents..</param>
        public HashDecorator(string Md5 = null, string Sha1 = null, string Sha256 = null)
        {
            this.Md5 = Md5;
            this.Sha1 = Sha1;
            this.Sha256 = Sha256;
        }
        
        /// <summary>
        /// The md5 hash of the entity\&quot;s binary contents.
        /// </summary>
        /// <value>The md5 hash of the entity\&quot;s binary contents.</value>
        [DataMember(Name="md5", EmitDefaultValue=false)]
        public string Md5 { get; set; }
        /// <summary>
        /// The sha1 hash of the entity\&quot;s binary contents.
        /// </summary>
        /// <value>The sha1 hash of the entity\&quot;s binary contents.</value>
        [DataMember(Name="sha1", EmitDefaultValue=false)]
        public string Sha1 { get; set; }
        /// <summary>
        /// The sha256 hash of the entity\&quot;s binary contents.
        /// </summary>
        /// <value>The sha256 hash of the entity\&quot;s binary contents.</value>
        [DataMember(Name="sha256", EmitDefaultValue=false)]
        public string Sha256 { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HashDecorator {\n");
            sb.Append("  Md5: ").Append(Md5).Append("\n");
            sb.Append("  Sha1: ").Append(Sha1).Append("\n");
            sb.Append("  Sha256: ").Append(Sha256).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HashDecorator);
        }

        /// <summary>
        /// Returns true if HashDecorator instances are equal
        /// </summary>
        /// <param name="other">Instance of HashDecorator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HashDecorator other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Md5 == other.Md5 ||
                    this.Md5 != null &&
                    this.Md5.Equals(other.Md5)
                ) && 
                (
                    this.Sha1 == other.Sha1 ||
                    this.Sha1 != null &&
                    this.Sha1.Equals(other.Sha1)
                ) && 
                (
                    this.Sha256 == other.Sha256 ||
                    this.Sha256 != null &&
                    this.Sha256.Equals(other.Sha256)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Md5 != null)
                    hash = hash * 59 + this.Md5.GetHashCode();
                if (this.Sha1 != null)
                    hash = hash * 59 + this.Sha1.GetHashCode();
                if (this.Sha256 != null)
                    hash = hash * 59 + this.Sha256.GetHashCode();
                return hash;
            }
        }
    }

}
